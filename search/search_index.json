{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Palign Palign is a Python package that helps to render and align text in Pillow . Examples Text draws text of a given Style at a set of coordinates: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Style , Text # Create a Pillow Image and Draw as usual: image = Image . new ( \"RGB\" , ( 270 , 60 )) draw = ImageDraw . Draw ( image ) # Create a Style to describe the font: style = Style ( font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), ) # Create a text renderer: text = Text ( draw , style ) # Draw \"Hello world!\" at (0, 0): text . draw ( \"Hello world!\" , ( 0 , 0 )) # Same the image via Pillow: image . save ( \"./docs/images/example-0.png\" , \"png\" ) Style can also describe borders, colour and tracking: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Style , Text image = Image . new ( \"RGB\" , ( 410 , 410 ), ( 255 , 255 , 255 )) draw = ImageDraw . Draw ( image ) style = Style ( color = ( 0 , 0 , 0 ), font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), ) text = Text ( draw , style ) # Pass in a style to merge into the renderer's base style: text . draw ( \"Red!\" , ( 0 , 0 ), style = Style ( color = ( 255 , 0 , 0 )), ) text . draw ( \"More tracking!\" , ( 0 , 60 ), style = Style ( tracking = 2 ), ) text . draw ( \"Less tracking!\" , ( 0 , 120 ), style = Style ( tracking =- 5 ), ) text . draw ( \"Highlight!\" , ( 0 , 180 ), style = Style ( background = ( 100 , 255 , 255 )), ) text . draw ( \"Rounded highlight!\" , ( 0 , 240 ), style = Style ( background = ( 100 , 255 , 255 ), border_radius = 20 ), ) text . draw ( \"Border!\" , ( 0 , 300 ), style = Style ( border_color = ( 255 , 0 , 0 ), border_width = 3 ), ) text . draw ( \"Rounded border!\" , ( 0 , 360 ), style = Style ( border_color = ( 255 , 0 , 0 ), border_radius = 20 , border_width = 3 ), ) image . save ( \"./docs/images/example-1.png\" , \"png\" ) If you specify a region to render within (rather than just a point to render at ) then text can aligned: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Percent , Style , Text , make_image_region # Create an image region: image_region = make_image_region ( 300 , 720 ) # Pass the image region's size into Image.new: image = Image . new ( \"RGB\" , image_region . size , ( 255 , 255 , 255 )) draw = ImageDraw . Draw ( image ) # We're going to build a region to render the first block of text into. # # We want this region to fill the entire width of the image, with a little # margin on every edge for comfort. # # So, let's start by creating a subregion with that margin by contracting in: margin_region = image_region . expand ( - 10 ) # Now we'll create a subregion that starts in the top-left corner, fills 100% # of the available width and is 70 pixels tall: text_region = margin_region . region2 ( 0 , 0 , Percent ( 100 ), 70 ) . resolve () # Note that we need to .resolve() the region to resolve the relative values to # absolutes. style = Style ( border_color = ( 200 , 200 , 200 ), border_radius = 3 , border_width = 1 , color = ( 0 , 0 , 0 ), font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 21 ), ) text = Text ( draw , style ) for vertical in Alignment : for horizontal in Alignment : alignment = Style ( horizontal = horizontal , vertical = vertical ) match horizontal : case Alignment . Near : horizontal_name = \"Left\" case Alignment . Center : horizontal_name = \"Center\" case Alignment . Far : horizontal_name = \"Right\" match vertical : case Alignment . Near : vertical_name = \"Top\" case Alignment . Center : vertical_name = \"Center\" case Alignment . Far : vertical_name = \"Bottom\" t = f \" { vertical_name } { horizontal_name } \" text . draw ( t , text_region , style = alignment ) # Translate the region down by (text_region.height + 10) pixels for # the next block. text_region += ( 0 , text_region . height + 10 ) image . save ( \"./docs/images/example-2.png\" , \"png\" ) To align text in a grid, use a Grid : from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Grid , Style , make_image_region image_region = make_image_region ( 600 , 400 ) image = Image . new ( \"RGB\" , image_region . size , ( 255 , 255 , 255 )) draw = ImageDraw . Draw ( image ) style = Style ( color = ( 0 , 0 , 0 ), font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 26 ), ) column_count = 3 row_count = 3 grid = Grid ( column_count , row_count , image_region . expand ( - 10 ), style = style , ) for vertical_index , vertical in enumerate ( Alignment ): for horizontal_index , horizontal in enumerate ( Alignment ): match horizontal : case Alignment . Near : horizontal_name = \"Left\" case Alignment . Center : horizontal_name = \"Center\" case Alignment . Far : horizontal_name = \"Right\" match vertical : case Alignment . Near : vertical_name = \"Top\" case Alignment . Center : vertical_name = \"Center\" case Alignment . Far : vertical_name = \"Bottom\" t = f \" { vertical_name } \\n { horizontal_name } \" grid [ horizontal_index , vertical_index ] . text = t grid [ horizontal_index , vertical_index ] . style . horizontal = horizontal grid [ horizontal_index , vertical_index ] . style . vertical = vertical def color_bit ( column : int ) -> int : return 155 + int (( 100 / column_count ) * column ) for x in range ( column_count ): for y in range ( row_count ): red = color_bit ( x ) if y == 0 else 255 green = color_bit ( x ) if y == 1 else 255 blue = color_bit ( x ) if y == 2 else 255 grid [ x , y ] . style . background = ( red , green , blue ) grid . draw ( draw ) image . save ( \"./docs/images/grid.png\" , \"png\" ) For detailed usage information, see the Style , Text and Grid classes. Installation Palign requires Python 3.9 or later. pip install palign Support Please raise bugs, request new features and ask questions at github.com/cariad/palign/issues . Contributions See CONTRIBUTING.md for contribution guidelines. The Project Palign is \u00a9 2022 Cariad Eccleston and released under the MIT License at github.com/cariad/palign . The Author Hello! \ud83d\udc4b I'm Cariad Eccleston and I'm a freelance backend and infrastructure engineer in the United Kingdom. You can find me at cariad.earth , github.com/cariad , linkedin.com/in/cariad and on Mastodon at @cariad@tech.lgbt .","title":"Palign"},{"location":"#palign","text":"Palign is a Python package that helps to render and align text in Pillow .","title":"Palign"},{"location":"#examples","text":"Text draws text of a given Style at a set of coordinates: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Style , Text # Create a Pillow Image and Draw as usual: image = Image . new ( \"RGB\" , ( 270 , 60 )) draw = ImageDraw . Draw ( image ) # Create a Style to describe the font: style = Style ( font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), ) # Create a text renderer: text = Text ( draw , style ) # Draw \"Hello world!\" at (0, 0): text . draw ( \"Hello world!\" , ( 0 , 0 )) # Same the image via Pillow: image . save ( \"./docs/images/example-0.png\" , \"png\" ) Style can also describe borders, colour and tracking: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Style , Text image = Image . new ( \"RGB\" , ( 410 , 410 ), ( 255 , 255 , 255 )) draw = ImageDraw . Draw ( image ) style = Style ( color = ( 0 , 0 , 0 ), font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), ) text = Text ( draw , style ) # Pass in a style to merge into the renderer's base style: text . draw ( \"Red!\" , ( 0 , 0 ), style = Style ( color = ( 255 , 0 , 0 )), ) text . draw ( \"More tracking!\" , ( 0 , 60 ), style = Style ( tracking = 2 ), ) text . draw ( \"Less tracking!\" , ( 0 , 120 ), style = Style ( tracking =- 5 ), ) text . draw ( \"Highlight!\" , ( 0 , 180 ), style = Style ( background = ( 100 , 255 , 255 )), ) text . draw ( \"Rounded highlight!\" , ( 0 , 240 ), style = Style ( background = ( 100 , 255 , 255 ), border_radius = 20 ), ) text . draw ( \"Border!\" , ( 0 , 300 ), style = Style ( border_color = ( 255 , 0 , 0 ), border_width = 3 ), ) text . draw ( \"Rounded border!\" , ( 0 , 360 ), style = Style ( border_color = ( 255 , 0 , 0 ), border_radius = 20 , border_width = 3 ), ) image . save ( \"./docs/images/example-1.png\" , \"png\" ) If you specify a region to render within (rather than just a point to render at ) then text can aligned: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Percent , Style , Text , make_image_region # Create an image region: image_region = make_image_region ( 300 , 720 ) # Pass the image region's size into Image.new: image = Image . new ( \"RGB\" , image_region . size , ( 255 , 255 , 255 )) draw = ImageDraw . Draw ( image ) # We're going to build a region to render the first block of text into. # # We want this region to fill the entire width of the image, with a little # margin on every edge for comfort. # # So, let's start by creating a subregion with that margin by contracting in: margin_region = image_region . expand ( - 10 ) # Now we'll create a subregion that starts in the top-left corner, fills 100% # of the available width and is 70 pixels tall: text_region = margin_region . region2 ( 0 , 0 , Percent ( 100 ), 70 ) . resolve () # Note that we need to .resolve() the region to resolve the relative values to # absolutes. style = Style ( border_color = ( 200 , 200 , 200 ), border_radius = 3 , border_width = 1 , color = ( 0 , 0 , 0 ), font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 21 ), ) text = Text ( draw , style ) for vertical in Alignment : for horizontal in Alignment : alignment = Style ( horizontal = horizontal , vertical = vertical ) match horizontal : case Alignment . Near : horizontal_name = \"Left\" case Alignment . Center : horizontal_name = \"Center\" case Alignment . Far : horizontal_name = \"Right\" match vertical : case Alignment . Near : vertical_name = \"Top\" case Alignment . Center : vertical_name = \"Center\" case Alignment . Far : vertical_name = \"Bottom\" t = f \" { vertical_name } { horizontal_name } \" text . draw ( t , text_region , style = alignment ) # Translate the region down by (text_region.height + 10) pixels for # the next block. text_region += ( 0 , text_region . height + 10 ) image . save ( \"./docs/images/example-2.png\" , \"png\" ) To align text in a grid, use a Grid : from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Grid , Style , make_image_region image_region = make_image_region ( 600 , 400 ) image = Image . new ( \"RGB\" , image_region . size , ( 255 , 255 , 255 )) draw = ImageDraw . Draw ( image ) style = Style ( color = ( 0 , 0 , 0 ), font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 26 ), ) column_count = 3 row_count = 3 grid = Grid ( column_count , row_count , image_region . expand ( - 10 ), style = style , ) for vertical_index , vertical in enumerate ( Alignment ): for horizontal_index , horizontal in enumerate ( Alignment ): match horizontal : case Alignment . Near : horizontal_name = \"Left\" case Alignment . Center : horizontal_name = \"Center\" case Alignment . Far : horizontal_name = \"Right\" match vertical : case Alignment . Near : vertical_name = \"Top\" case Alignment . Center : vertical_name = \"Center\" case Alignment . Far : vertical_name = \"Bottom\" t = f \" { vertical_name } \\n { horizontal_name } \" grid [ horizontal_index , vertical_index ] . text = t grid [ horizontal_index , vertical_index ] . style . horizontal = horizontal grid [ horizontal_index , vertical_index ] . style . vertical = vertical def color_bit ( column : int ) -> int : return 155 + int (( 100 / column_count ) * column ) for x in range ( column_count ): for y in range ( row_count ): red = color_bit ( x ) if y == 0 else 255 green = color_bit ( x ) if y == 1 else 255 blue = color_bit ( x ) if y == 2 else 255 grid [ x , y ] . style . background = ( red , green , blue ) grid . draw ( draw ) image . save ( \"./docs/images/grid.png\" , \"png\" ) For detailed usage information, see the Style , Text and Grid classes.","title":"Examples"},{"location":"#installation","text":"Palign requires Python 3.9 or later. pip install palign","title":"Installation"},{"location":"#support","text":"Please raise bugs, request new features and ask questions at github.com/cariad/palign/issues .","title":"Support"},{"location":"#contributions","text":"See CONTRIBUTING.md for contribution guidelines.","title":"Contributions"},{"location":"#the-project","text":"Palign is \u00a9 2022 Cariad Eccleston and released under the MIT License at github.com/cariad/palign .","title":"The Project"},{"location":"#the-author","text":"Hello! \ud83d\udc4b I'm Cariad Eccleston and I'm a freelance backend and infrastructure engineer in the United Kingdom. You can find me at cariad.earth , github.com/cariad , linkedin.com/in/cariad and on Mastodon at @cariad@tech.lgbt .","title":"The Author"},{"location":"grid/","text":"Grid class The Grid class draws text in a grid to a Pillow image. Initialisation A Grid instance must be initialised with the number of columns and rows, the region to render within, and an optional default Style for the cells. For example, this code creates a Grid that's 90% the width of the image with three columns, 90% the height of the image with four rows, and centred within the image: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Grid , Percent , Style , make_image_region image_region = make_image_region ( 500 , 500 ) image = Image . new ( \"RGB\" , image_region . size ) draw = ImageDraw . Draw ( image ) grid_region = image_region . region2 ( Alignment . Center , Alignment . Center , Percent ( 90 ), Percent ( 90 ), ) style = Style ( border_color = ( 100 , 100 , 100 ), border_width = 1 , font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 34 ), ) grid = Grid ( 3 , 4 , grid_region , style = style ) grid . draw ( draw ) image . save ( \"./docs/images/grid-example-0.png\" , \"png\" ) The draw function draws the grid to a Pillow Draw instance: Setting text To set the text at a given coordinate, use the grid's indexing to access the cell's text property: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Grid , Percent , Style , make_image_region image_region = make_image_region ( 500 , 500 ) image = Image . new ( \"RGB\" , image_region . size ) draw = ImageDraw . Draw ( image ) style = Style ( border_color = ( 100 , 100 , 100 ), border_width = 1 , font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 34 ), ) grid_region = image_region . region2 ( Alignment . Center , Alignment . Center , Percent ( 90 ), Percent ( 90 ), ) grid = Grid ( 3 , 4 , grid_region , style = style ) grid [ 0 , 0 ] . text = \"Hello!\" grid [ 2 , 1 ] . text = \"Hola!\" grid [ 1 , 3 ] . text = \"Hej!\" grid [ 0 , 2 ] . text = \"Bonjour!\" grid . draw ( draw ) image . save ( \"./docs/images/grid-example-1.png\" , \"png\" ) Setting styles To set a cell's style, use the grid's indexing to access the cell's style property: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Grid , Percent , Style , make_image_region image_region = make_image_region ( 500 , 500 ) image = Image . new ( \"RGB\" , image_region . size ) draw = ImageDraw . Draw ( image ) style = Style ( border_color = ( 100 , 100 , 100 ), border_width = 1 , font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 34 ), ) grid_region = image_region . region2 ( Alignment . Center , Alignment . Center , Percent ( 90 ), Percent ( 90 ), ) grid = Grid ( 3 , 4 , grid_region , style = style ) grid [ 0 , 0 ] . style . color = ( 255 , 255 , 0 ) grid [ 0 , 0 ] . text = \"Hello!\" grid [ 2 , 1 ] . style . tracking = 10 grid [ 2 , 1 ] . text = \"Hola!\" grid [ 1 , 3 ] . style . background = ( 0 , 50 , 0 ) grid [ 1 , 3 ] . text = \"Hej!\" grid [ 0 , 2 ] . style . vertical = Alignment . Center grid [ 0 , 2 ] . text = \"Bonjour!\" grid . draw ( draw ) image . save ( \"./docs/images/grid-example-2.png\" , \"png\" )","title":"Grid class"},{"location":"grid/#grid-class","text":"The Grid class draws text in a grid to a Pillow image.","title":"Grid class"},{"location":"grid/#initialisation","text":"A Grid instance must be initialised with the number of columns and rows, the region to render within, and an optional default Style for the cells. For example, this code creates a Grid that's 90% the width of the image with three columns, 90% the height of the image with four rows, and centred within the image: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Grid , Percent , Style , make_image_region image_region = make_image_region ( 500 , 500 ) image = Image . new ( \"RGB\" , image_region . size ) draw = ImageDraw . Draw ( image ) grid_region = image_region . region2 ( Alignment . Center , Alignment . Center , Percent ( 90 ), Percent ( 90 ), ) style = Style ( border_color = ( 100 , 100 , 100 ), border_width = 1 , font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 34 ), ) grid = Grid ( 3 , 4 , grid_region , style = style ) grid . draw ( draw ) image . save ( \"./docs/images/grid-example-0.png\" , \"png\" ) The draw function draws the grid to a Pillow Draw instance:","title":"Initialisation"},{"location":"grid/#setting-text","text":"To set the text at a given coordinate, use the grid's indexing to access the cell's text property: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Grid , Percent , Style , make_image_region image_region = make_image_region ( 500 , 500 ) image = Image . new ( \"RGB\" , image_region . size ) draw = ImageDraw . Draw ( image ) style = Style ( border_color = ( 100 , 100 , 100 ), border_width = 1 , font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 34 ), ) grid_region = image_region . region2 ( Alignment . Center , Alignment . Center , Percent ( 90 ), Percent ( 90 ), ) grid = Grid ( 3 , 4 , grid_region , style = style ) grid [ 0 , 0 ] . text = \"Hello!\" grid [ 2 , 1 ] . text = \"Hola!\" grid [ 1 , 3 ] . text = \"Hej!\" grid [ 0 , 2 ] . text = \"Bonjour!\" grid . draw ( draw ) image . save ( \"./docs/images/grid-example-1.png\" , \"png\" )","title":"Setting text"},{"location":"grid/#setting-styles","text":"To set a cell's style, use the grid's indexing to access the cell's style property: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Grid , Percent , Style , make_image_region image_region = make_image_region ( 500 , 500 ) image = Image . new ( \"RGB\" , image_region . size ) draw = ImageDraw . Draw ( image ) style = Style ( border_color = ( 100 , 100 , 100 ), border_width = 1 , font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 34 ), ) grid_region = image_region . region2 ( Alignment . Center , Alignment . Center , Percent ( 90 ), Percent ( 90 ), ) grid = Grid ( 3 , 4 , grid_region , style = style ) grid [ 0 , 0 ] . style . color = ( 255 , 255 , 0 ) grid [ 0 , 0 ] . text = \"Hello!\" grid [ 2 , 1 ] . style . tracking = 10 grid [ 2 , 1 ] . text = \"Hola!\" grid [ 1 , 3 ] . style . background = ( 0 , 50 , 0 ) grid [ 1 , 3 ] . text = \"Hej!\" grid [ 0 , 2 ] . style . vertical = Alignment . Center grid [ 0 , 2 ] . text = \"Bonjour!\" grid . draw ( draw ) image . save ( \"./docs/images/grid-example-2.png\" , \"png\" )","title":"Setting styles"},{"location":"style/","text":"Style class The Style class describes the style of text to render. from palign import Style style = Style ( background =... , border_color =... , border_radius =... , border_width =... , color =... , font =... , horizontal =... , tracking =... , vertical =... , ) Style properties background sets the background colour . border_color sets the border colour . Warning Borders will be painted only if both border_color and border_width have values. border_radius sets the border radius. Corners will be square by default and rounded if a radius is set. Warning Borders will be painted only if both border_color and border_width have values. border_width sets the border width. Warning Borders will be painted only if both border_color and border_width have values. color sets the text colour. font sets text font. horizontal sets the horizontal alignment. Alignment.Near implies left , Alignment.Center will centre the text and Alignment.Far implies right . Warning Text will be aligned only if the text is rendered within a region and not just a point. tracking sets the spacing between characters. vertical sets the vertical alignment. Alignment.Near implies top , Alignment.Center will centre the text and Alignment.Far implies bottom . Warning Text will be aligned only if the text is rendered within a region and not just a point. Merging styles Styles can be merged via addition. The style on the right always takes precedence. a = Style ( border_width = 2 , color = ( 0 , 0 , 0 ), ) b = Style ( color = ( 255 , 255 , 255 ), tracking = 5 , ) c = a + b In the example above, c has: border_width = 2 color = (255, 255, 255) tracking = 5 Colour Colours in Palign are described via either: (red, green, blue) (red, green, blue, alpha) Values run from 0 to 255. For example: (0, 0, 0) is black (255, 255, 255) is white (255, 0, 0) is red (0, 255, 0) is green (0, 0, 255) is blue (0, 0, 0, 0) is transparent (255, 0, 255, 127) is 50% opaque magenta StyledText class The StyledText class describes strings with explicit styles. A StyledText instance can be created for a Style by calling its text function. For example, to explicitly style the word \"world\" in yellow: from palign import Style world = Style ( color = ( 255 , 255 , 0 )) . text ( \"world\" ) Render a StyledText instance by passing it to a Text renderer.","title":"Style class"},{"location":"style/#style-class","text":"The Style class describes the style of text to render. from palign import Style style = Style ( background =... , border_color =... , border_radius =... , border_width =... , color =... , font =... , horizontal =... , tracking =... , vertical =... , )","title":"Style class"},{"location":"style/#style-properties","text":"background sets the background colour . border_color sets the border colour . Warning Borders will be painted only if both border_color and border_width have values. border_radius sets the border radius. Corners will be square by default and rounded if a radius is set. Warning Borders will be painted only if both border_color and border_width have values. border_width sets the border width. Warning Borders will be painted only if both border_color and border_width have values. color sets the text colour. font sets text font. horizontal sets the horizontal alignment. Alignment.Near implies left , Alignment.Center will centre the text and Alignment.Far implies right . Warning Text will be aligned only if the text is rendered within a region and not just a point. tracking sets the spacing between characters. vertical sets the vertical alignment. Alignment.Near implies top , Alignment.Center will centre the text and Alignment.Far implies bottom . Warning Text will be aligned only if the text is rendered within a region and not just a point.","title":"Style properties"},{"location":"style/#merging-styles","text":"Styles can be merged via addition. The style on the right always takes precedence. a = Style ( border_width = 2 , color = ( 0 , 0 , 0 ), ) b = Style ( color = ( 255 , 255 , 255 ), tracking = 5 , ) c = a + b In the example above, c has: border_width = 2 color = (255, 255, 255) tracking = 5","title":"Merging styles"},{"location":"style/#colour","text":"Colours in Palign are described via either: (red, green, blue) (red, green, blue, alpha) Values run from 0 to 255. For example: (0, 0, 0) is black (255, 255, 255) is white (255, 0, 0) is red (0, 255, 0) is green (0, 0, 255) is blue (0, 0, 0, 0) is transparent (255, 0, 255, 127) is 50% opaque magenta","title":"Colour"},{"location":"style/#styledtext-class","text":"The StyledText class describes strings with explicit styles. A StyledText instance can be created for a Style by calling its text function. For example, to explicitly style the word \"world\" in yellow: from palign import Style world = Style ( color = ( 255 , 255 , 0 )) . text ( \"world\" ) Render a StyledText instance by passing it to a Text renderer.","title":"StyledText class"},{"location":"text/","text":"Text class The Text class draws text to a Pillow image. Initialisation A Text instance must be initialised with a Pillow Draw . You can also pass in an optional base Style for all the text to be rendered. from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Style , Text image = Image . new ( \"RGB\" , ( 100 , 100 )) draw = ImageDraw . Draw ( image ) style = Style ( font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), ) renderer = Text ( draw , style ) Drawing text The draw function requires the text to render and either a position or bounds to render within. You can also pass an optional Style to merge with the base style. Drawing at a position This code draws \"Hello!\" at the coordinates (0, 0) , or the top-left of the image: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Style , Text image = Image . new ( \"RGB\" , ( 300 , 300 )) draw = ImageDraw . Draw ( image ) style = Style ( font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), ) renderer = Text ( draw , style ) renderer . draw ( \"Hello!\" , ( 0 , 0 )) image . save ( \"./docs/images/text-example-0.png\" , \"png\" ) Aligning within a region To draw the text with some alignment within a region, define that region than pass it to draw instead of a position. For example, this code creates a region at the top-left of the image, with width and height of 200 pixels, then centers the text within it. from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Region , Style , Text image = Image . new ( \"RGB\" , ( 300 , 300 )) draw = ImageDraw . Draw ( image ) style = Style ( border_color = ( 100 , 100 , 100 ), border_width = 1 , font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), horizontal = Alignment . Center , vertical = Alignment . Center , ) region = Region . new ( 0 , 0 , 200 , 200 ) renderer = Text ( draw , style ) renderer . draw ( \"Hello!\" , region ) image . save ( \"./docs/images/text-example-1.png\" , \"png\" ) Relative alignment To align a region (and not necessarily the text within it) you can create subregions with specific positions and sizes. For example, this code uses make_image_region to describe the full size of the image, then calls .region2() to create a subregion 200 pixels tall and wide and aligned to the far edges of the image: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Style , Text , make_image_region image_region = make_image_region ( 300 , 300 ) image = Image . new ( \"RGB\" , image_region . size ) draw = ImageDraw . Draw ( image ) style = Style ( border_color = ( 100 , 100 , 100 ), border_width = 1 , font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), horizontal = Alignment . Center , vertical = Alignment . Center , ) region = image_region . region2 ( Alignment . Far , Alignment . Far , 200 , 200 ) renderer = Text ( draw , style ) renderer . draw ( \"Hello!\" , region ) image . save ( \"./docs/images/text-example-2.png\" , \"png\" ) Relative sizes The highest-level region must have explicit pixel dimensions, but subregions can have Percent lengths. For example, this code creates a subregion that's 50% of the image's width and height and centred within the image: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Percent , Style , Text , make_image_region image_region = make_image_region ( 300 , 300 ) image = Image . new ( \"RGB\" , image_region . size ) draw = ImageDraw . Draw ( image ) style = Style ( border_color = ( 100 , 100 , 100 ), border_width = 1 , font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), horizontal = Alignment . Center , vertical = Alignment . Center , ) region = image_region . region2 ( Alignment . Center , Alignment . Center , Percent ( 50 ), Percent ( 50 ), ) renderer = Text ( draw , style ) renderer . draw ( \"Hello!\" , region ) image . save ( \"./docs/images/text-example-3.png\" , \"png\" ) Changing styles within text To style a substring differently -- for example, to highlight a word in a different colour -- you can pass a sequence of strings and StyledText to draw : from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Style , Text , make_image_region image_region = make_image_region ( 300 , 300 ) image = Image . new ( \"RGB\" , image_region . size ) draw = ImageDraw . Draw ( image ) style = Style ( font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), horizontal = Alignment . Center , vertical = Alignment . Center , ) renderer = Text ( draw , style ) world = Style ( color = ( 255 , 255 , 0 )) . text ( \"world\" ) renderer . draw ( ( \"Hello \" , world , \"!\" ), image_region , ) image . save ( \"./docs/images/text-example-4.png\" , \"png\" )","title":"Text class"},{"location":"text/#text-class","text":"The Text class draws text to a Pillow image.","title":"Text class"},{"location":"text/#initialisation","text":"A Text instance must be initialised with a Pillow Draw . You can also pass in an optional base Style for all the text to be rendered. from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Style , Text image = Image . new ( \"RGB\" , ( 100 , 100 )) draw = ImageDraw . Draw ( image ) style = Style ( font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), ) renderer = Text ( draw , style )","title":"Initialisation"},{"location":"text/#drawing-text","text":"The draw function requires the text to render and either a position or bounds to render within. You can also pass an optional Style to merge with the base style.","title":"Drawing text"},{"location":"text/#drawing-at-a-position","text":"This code draws \"Hello!\" at the coordinates (0, 0) , or the top-left of the image: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Style , Text image = Image . new ( \"RGB\" , ( 300 , 300 )) draw = ImageDraw . Draw ( image ) style = Style ( font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), ) renderer = Text ( draw , style ) renderer . draw ( \"Hello!\" , ( 0 , 0 )) image . save ( \"./docs/images/text-example-0.png\" , \"png\" )","title":"Drawing at a position"},{"location":"text/#aligning-within-a-region","text":"To draw the text with some alignment within a region, define that region than pass it to draw instead of a position. For example, this code creates a region at the top-left of the image, with width and height of 200 pixels, then centers the text within it. from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Region , Style , Text image = Image . new ( \"RGB\" , ( 300 , 300 )) draw = ImageDraw . Draw ( image ) style = Style ( border_color = ( 100 , 100 , 100 ), border_width = 1 , font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), horizontal = Alignment . Center , vertical = Alignment . Center , ) region = Region . new ( 0 , 0 , 200 , 200 ) renderer = Text ( draw , style ) renderer . draw ( \"Hello!\" , region ) image . save ( \"./docs/images/text-example-1.png\" , \"png\" )","title":"Aligning within a region"},{"location":"text/#relative-alignment","text":"To align a region (and not necessarily the text within it) you can create subregions with specific positions and sizes. For example, this code uses make_image_region to describe the full size of the image, then calls .region2() to create a subregion 200 pixels tall and wide and aligned to the far edges of the image: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Style , Text , make_image_region image_region = make_image_region ( 300 , 300 ) image = Image . new ( \"RGB\" , image_region . size ) draw = ImageDraw . Draw ( image ) style = Style ( border_color = ( 100 , 100 , 100 ), border_width = 1 , font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), horizontal = Alignment . Center , vertical = Alignment . Center , ) region = image_region . region2 ( Alignment . Far , Alignment . Far , 200 , 200 ) renderer = Text ( draw , style ) renderer . draw ( \"Hello!\" , region ) image . save ( \"./docs/images/text-example-2.png\" , \"png\" )","title":"Relative alignment"},{"location":"text/#relative-sizes","text":"The highest-level region must have explicit pixel dimensions, but subregions can have Percent lengths. For example, this code creates a subregion that's 50% of the image's width and height and centred within the image: from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Percent , Style , Text , make_image_region image_region = make_image_region ( 300 , 300 ) image = Image . new ( \"RGB\" , image_region . size ) draw = ImageDraw . Draw ( image ) style = Style ( border_color = ( 100 , 100 , 100 ), border_width = 1 , font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), horizontal = Alignment . Center , vertical = Alignment . Center , ) region = image_region . region2 ( Alignment . Center , Alignment . Center , Percent ( 50 ), Percent ( 50 ), ) renderer = Text ( draw , style ) renderer . draw ( \"Hello!\" , region ) image . save ( \"./docs/images/text-example-3.png\" , \"png\" )","title":"Relative sizes"},{"location":"text/#changing-styles-within-text","text":"To style a substring differently -- for example, to highlight a word in a different colour -- you can pass a sequence of strings and StyledText to draw : from PIL import Image , ImageDraw from PIL.ImageFont import truetype from palign import Alignment , Style , Text , make_image_region image_region = make_image_region ( 300 , 300 ) image = Image . new ( \"RGB\" , image_region . size ) draw = ImageDraw . Draw ( image ) style = Style ( font = truetype ( \"tests/font/ChelseaMarket-Regular.ttf\" , 42 ), horizontal = Alignment . Center , vertical = Alignment . Center , ) renderer = Text ( draw , style ) world = Style ( color = ( 255 , 255 , 0 )) . text ( \"world\" ) renderer . draw ( ( \"Hello \" , world , \"!\" ), image_region , ) image . save ( \"./docs/images/text-example-4.png\" , \"png\" )","title":"Changing styles within text"}]}